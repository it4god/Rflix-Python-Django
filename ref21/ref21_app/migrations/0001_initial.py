# Generated by Django 4.1.1 on 2022-09-12 02:42

from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('id', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('username', models.CharField(max_length=100)),
                ('Firstname', models.CharField(max_length=100)),
                ('Lastname', models.CharField(max_length=100)),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('Gender', models.CharField(max_length=1)),
                ('Location', models.CharField(max_length=100)),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now)),
                ('is_active', models.BooleanField(default=True, verbose_name='is active')),
                ('is_staff', models.BooleanField(default=True, verbose_name='is staff')),
                ('is_superuser', models.BooleanField(default=True, verbose_name='is superuser')),
            ],
            options={
                'verbose_name': 'User',
            },
        ),
        migrations.CreateModel(
            name='Country',
            fields=[
                ('CountryCode', models.CharField(max_length=2, primary_key=True, serialize=False)),
                ('CountryName', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='Playlist',
            fields=[
                ('PlaylistID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('PlaylistName', models.CharField(max_length=255)),
                ('Description', models.TextField()),
                ('PlaylistPosterLocation', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('theme', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('VODID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Name', models.CharField(max_length=255)),
                ('Pembicara', models.CharField(max_length=255)),
                ('VideoLength', models.CharField(max_length=30)),
                ('Playlist_Master_Location', models.CharField(max_length=255)),
                ('Playlist_360p_Location', models.CharField(max_length=255)),
                ('Playlist_480p_Location', models.CharField(max_length=255)),
                ('Playlist_720p_Location', models.CharField(max_length=255)),
                ('Playlist_1080p_Location', models.CharField(max_length=255)),
                ('Description', models.TextField()),
                ('PosterLocation', models.CharField(max_length=255)),
                ('PlaylistID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ref21_app.playlist')),
            ],
        ),
        migrations.CreateModel(
            name='Watchlist',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('UID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('VODID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ref21_app.video')),
            ],
        ),
        migrations.CreateModel(
            name='VideoTimePosition',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('TimePosition', models.CharField(max_length=15)),
                ('UID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
                ('VODID', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ref21_app.video')),
            ],
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('UID', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('Firstname', models.CharField(max_length=50)),
                ('Lastname', models.CharField(max_length=50)),
                ('Email', models.EmailField(max_length=60)),
                ('Gender', models.CharField(max_length=1)),
                ('Location', models.CharField(max_length=100)),
                ('Password', models.CharField(max_length=200)),
                ('CountryCode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ref21_app.country')),
            ],
        ),
        migrations.AddField(
            model_name='playlist',
            name='Theme',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='ref21_app.theme'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='CountryCode',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='ref21_app.country'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='customuser',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
